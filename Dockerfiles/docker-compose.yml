version: '2'

services:
    mysql:
        #image: mysql
        image: mysql:5.7
        #build: mysql
        restart: always
        environment:
            - MYSQL_ROOT_PASSWORD=123456
            - MYSQL_DATABASE=mxshop1
            - MYSQL_USER=root
            - MYSQL_PASSWORD=123456
            - MYSQL_HOST=0.0.0.0
            - MYSQL_PORT=3306  # cannot change this port to other number
            - MYSQL_ROOT_HOST=%

        ports:
            - '3306:3306'
        volumes:
            - './database/mysql:/var/lib/mysql'
            - './femn.conf:/etc/mysql/mysql.conf.d/femn.cnf'
#            - './femn.conf:/etc/mysql/conf.d/qhh.cnf'
#            - './femn.cnf:/etc/mysql/my.cnf'  # 不能覆盖镜像文件(mysql:5.7中启动文件)

#        command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0

        #   - xx:/var/lib/mysql  
        #   会自动在/var/lib/docker/volumes下,创建dockerfiles_xx目录,所以必须要有 ./

        # - ./database/mysql:var/lib/mysql # 当database目录没有mysql目录时,也会自动创建
        # - /data # 当只有一个时，表示的是容器的目录,容器的定义的目录,它将会自动保存在宿主机的/var/lib/docker/volumes目录下,如下等同
        # Dockerfile中 VOLUME ["/data1","/data2"] 创建的挂载点,无法指定主机上对应的目录,是自动生成的

        networks:
          - back-tier

    redis:
        image: 'bitnami/redis:latest'
        environment:
            - ALLOW_EMPTY_PASSWORD=yes
        ports:
            - '6379:6379'
            # (HOST:CONTAINER)
        volumes:
            - ./database/redis:/bitnami
        restart: always
        networks:
          - back-tier

    web:
        restart: always
        build: ../MxShop
        networks:
          - front-tier
          - back-tier
        expose:
          - "80"
        # scale时,去掉绑定端口
#        ports:
#            - "8000:80" # 如果在uwsgi中使用http则容器的端口也要一致
#            - "9090:9090"
            # (HOST:CONTAINER(nginx) 只要把ports这参数注释掉,就可以使用docker-compose scale web=3
            # (3 这个数量会,会根据电脑的性能去写,如果性能不足,则减少数量)
            # https://nicolai86.eu/blog/2016/03/docker-compose-load-balancing/
        links:
            - mysql
            - redis
        volumes:
            - '../MxShop:/code'
            # (HOST:CONTAINER)
            #- /usr/src/app/static
        environment:
            - DEBUG= 'true'
#        command: python3 manage.py runserver 0.0.0.0:8000
#        command: uwsgi --ini uwsgi.ini
        command: uwsgi --ini uwsgi.ini
#        command: uwsgi --emperor /code/uwsgi/  # --plugin python --enable-threads

        #command: bash -c "python3 manage.py makemigrations &&
                #python3 manage.py migrate &&
                #python3 init_admin.py &&
                #python3 manage.py runserver 0.0.0.0:8000"
                #
                #/usr/local/bin/gunicorn --bind 0.0.0.0:8000 MxShop.wsgi:application -w 2"

#    web2:
#        build: ../MxShop
#        ports:
#            - "8001:8000"
#        links:
#            - mysql
#            - redis
#        volumes:
#            - '../MxShop:/code'
#        environment:
#            - DEBUG= 'true'
#        command: uwsgi --ini uwsgi.ini --http :8000
#        command: python3 manage.py runserver 0.0.0.0:8000

#    nginx:
#        restart: always
#        build: nginx
##        image: haproxy
##        container_name: nginx-container
#        ports:
#            - "80:80"
#            - "81:81"
#            - "82:82"
#            - "83:83"
#            - "443:443"
#        volumes:
#            - ./nginx/sites-enabled:/etc/nginx/sites-enabled
#            - ./nginx/log:/var/log/nginx
#            - ./nginx/www:/usr/share/nginx/html
#        volumes_from:
#            - web
##            - web2
#        links:
#            - web:drf_web
##            - web2:drf_web2
#        #docker run --name mysql1 -p 80:80 -v /home/femn/Documents/docker-django/Dockerfiles/nginx/www:/usr/share/nginx/html:ro  -d nginx
#        networks:
#          - front-tier
#          - back-tier
    #nginx-proxy:
        #image: jwilder/nginx-proxy
        #ports:
            #- "80:80"
        #volumes:
            #- /var/run/docker.sock:/tmp/docker.sock:ro
            #- ./nginx/conf.d:/etc/nginx/conf.d
            #- ./nginx/log:/var/log/nginx
            #- ./nginx/www:/usr/share/nginx/html
        #volumes_from:
            #- web
        #links:
            #- web:drf_web
            #docker run --name mysql1  -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro -d jwilder/nginx-proxy
            #docker run --name mysql1  -p 80:80 -v /home/femn/Documents/docker-django/Dockerfiles/nginx/www:/usr/share/nginx/html:ro -d jwilder/nginx-proxy

    haproxy:
    # 第一种方式
#      build: haproxy
#      links:
#        - web:drf_web

    # 第二种方式
      environment:
        STATS_PORT: '1936'
        MONITOR_PORT: '80'
        MONITOR_URI: '/status'
      image: dockercloud/haproxy
      links:
        - web

      networks:
        - front-tier
        - back-tier
      ports:
        - "80:80"
        - "1936:1936"
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock


networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge