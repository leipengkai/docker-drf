version: '2'

services:

    mq:
        image: "rabbitmq:3-management"
        hostname: "mq"
        environment:
            RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
            RABBITMQ_DEFAULT_USER: "rabbitmq"
            RABBITMQ_DEFAULT_PASS: "rabbitmq"
            RABBITMQ_DEFAULT_VHOST: "/"
        ports:
        - "15672:15672"
        - "5672:5672"
        labels:
            NAME: "mq1"
#        volumes:
#        - "./enabled_plugins:/etc/rabbitmq/enabled_plugins"
#        - "./rabbitmq.config:/etc/rabbitmq/rabbitmq.config"

    node:
        restart: always
        build: node
        working_dir: /vue/online-store
        environment:
            - NODE_ENV=production
        volumes:
            # 按理来说容器中的所有文件,都会挂载到宿主机中
            - ./node:/vue  # 但容器中解压后得到的内容,或者cnpm install,下载时保存库的目录
            # 是不会挂载到指定的宿主目录下的,我们只能将这些内容挂载到宿主机的默认路径下
            - /vue/online-store/node_modules  # cnpm install的包,设置到默认宿主机挂载的路径下,否则无法下载
        ports:
            - "3000:3000"
#       command: "cnpm run dev" # 不能这样运行
        command: "npm start"

    mysql:
        #image: mysql
        image: mysql:5.7
        #build: mysql
        restart: always
        environment:
            - MYSQL_ROOT_PASSWORD=123456
            - MYSQL_DATABASE=mxshop1
            - MYSQL_USER=root
            - MYSQL_PASSWORD=123456
            - MYSQL_HOST=0.0.0.0
            - MYSQL_PORT=3306  # cannot change this port to other number
            - MYSQL_ROOT_HOST=%

        ports:
            - '3308:3306'
        volumes:
            - './database/mysql:/var/lib/mysql'
            - './femn.conf:/etc/mysql/mysql.conf.d/femn.cnf'
            - './mxshop.sql:/home/mxshop.sql'
#            - './femn.conf:/etc/mysql/conf.d/qhh.cnf'
#            - './femn.cnf:/etc/mysql/my.cnf'  # 不能覆盖镜像文件(mysql:5.7中启动文件)

#        command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;' --innodb-flush-log-at-trx-commit=0

        #   - xx:/var/lib/mysql  
        #   会自动在/var/lib/docker/volumes下,创建dockerfiles_xx目录,所以必须要有 ./

        # - ./database/mysql:var/lib/mysql # 当database目录没有mysql目录时,也会自动创建
        # - /data # 当只有一个时，表示的是容器的目录,容器的定义的目录,它将会自动保存在宿主机的/var/lib/docker/volumes目录下,如下等同
        # Dockerfile中 VOLUME ["/data1","/data2"] 创建的挂载点,无法指定主机上对应的目录,是自动生成的

        networks:
          - back-tier

    redis:
        image: 'bitnami/redis:latest'
        environment:
            - ALLOW_EMPTY_PASSWORD=yes
        ports:
            - '6379:6379'
            # (HOST:CONTAINER)
        volumes:
            - ./database/redis:/bitnami
        restart: always
        networks:
          - back-tier

    web:
        restart: always
        build: ../mxshop
        networks:
          - front-tier
          - back-tier
        expose:
          - "80"
        # scale时,去掉绑定端口
        ports:
            # - "8000:80" # 如果在uwsgi中使用http则容器的端口也要一致
            - "8080:8000"  # 当使用docker-compose做为Pycharm的解释器时,必须要显示指定port
#            1.主机port:config中drf_docker中配置的port,所以不需要command命令去绑定pycharm的启动
#            2.使用pycharm启动后,不要docker commit,不然但docker-compose up启动时,会找不到文件,生产volumes的地方不同
#            3.便没有试过在终端docker commit之后,pycharm能不能 正常启动??
#            - "9090:9090"
            # (HOST:CONTAINER(nginx) 只要把ports这参数注释掉,就可以使用docker-compose scale web=3
            # (3 这个数量会,会根据电脑的性能去写,如果性能不足,则减少数量)
            # https://nicolai86.eu/blog/2016/03/docker-compose-load-balancing/
        links:
            - mysql
            - redis
            - mq
        volumes:
            - '../mxshop:/code'
            # (HOST:CONTAINER)
            #- /usr/src/app/static

#        logging:
#          driver: syslog
#          options:
#              syslog-address: tcp://0.0.0.0:5000
#              tag: web-container-tcp
        environment:
            - DEBUG= 'true'
#        command: python3 manage.py runserver 0.0.0.0:8000
#        command: uwsgi --ini uwsgi.ini
        command: uwsgi --ini uwsgi.ini
#        command: uwsgi --emperor /code/uwsgi/  # --plugin python --enable-threads

        #command: bash -c "python3 manage.py makemigrations &&
                #python3 manage.py migrate &&
                #python3 init_admin.py &&
                #python3 manage.py runserver 0.0.0.0:8000"
                #
                #/usr/local/bin/gunicorn --bind 0.0.0.0:8000 mxshop.wsgi:application -w 2"

    worker:
        build: ../mxshop
        restart: always
        networks:
          - front-tier
          - back-tier
            # command: celery worker -A mxshop -l info -Q default -n default@%h
        command: celery worker -A mxshop -l info
 
        volumes:
          - '../mxshop:/code'
        links:
            - web
            - mq

    nginx:
        restart: always
        build: nginx
        ports:
            - "80:80"
            - "81:81"
            - "82:82"
            - "83:83"
            - "443:443"
        volumes:
            - ./nginx/sites-enabled:/etc/nginx/sites-enabled
            - ./nginx/log:/var/log/nginx
            - ./nginx/www:/usr/share/nginx/html
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
            - ./nginx/femn.pem:/etc/nginx/femn.pem
            - ./nginx/femn_private.key:/etc/nginx/femn_private.key
            - ./nginx/uwsgi.conf:/etc/nginx/sites-available/uwsgi.conf
            - ./nginx/index.html:/usr/share/nginx/html/index.html
        volumes_from:
            - web
        links:
            - web:drf_web
        networks:
          - front-tier
          - back-tier
        #docker run --name mysql1 -p 80:80 -v /home/femn/Documents/docker-django/Dockerfiles/nginx/www:/usr/share/nginx/html:ro  -d nginx

#    haproxy:
#    # 第一种方式
##      build: haproxy
##      links:
##        - web:drf_web
#
#    # 第二种方式
#      environment:
#        STATS_PORT: '1936'
#        MONITOR_PORT: '80'
#        MONITOR_URI: '/status'
#      image: dockercloud/haproxy
#      links:
#        - web
#
#      networks:
#        - front-tier
#        - back-tier
#      ports:
#        - "80:80"
#        - "1936:1936"
#      volumes:
#        - /var/run/docker.sock:/var/run/docker.sock


networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
