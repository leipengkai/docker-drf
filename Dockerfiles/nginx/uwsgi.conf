# the web client <-> the web server （ Nginx ） <-> unix socket <-> uWSGI <-> Django
# the upstream component nginx needs to connect to

uwsgi_cache_path /tmp/nginx_cache/ levels=1:2 keys_zone=mycache:10m max_size=10g inactive=10m use_temp_path=off;

upstream uwsgi {
	# server drf_web:8000; # drf_web:容器端口 use TCP
	# server drf_web2:8000; # drf_web2:容器端口 use TCP

  	# server 0.0.0.0:8089; # socket中只能以一种形式启动,http(socket)
  	# server 0.0.0.0:8090; # 如果使用http的方式的写,应该是这样的写法

   	server unix:/code/app.sock ; # for a file socket

	# server unix:/code/app2.sock ; # for a file socket
	# server unix:/code/app3.sock ; # for a file socket

    # server unix:/code2/app.sock ; # for a file socket
	# 用socket做负载均衡目前只会 复制项目,然后在Dockerfile中 写成/code2

}

# configuration of the server
server {
	# the port your site will be served on
	listen    80;
	# index  index.html;
	# the domain name it will serve for
	# substitute your machine's IP address or FQDN
	server_name  0.0.0.0;
	charset     utf-8;

	client_max_body_size 75M;   # adjust to taste

	# Django media
	location /media  {

	    alias /code/media;  # your Django project's media files - amend as required

		if ($request_uri ~* "\.(ico|gif|jpe?g|png|woff|woff2|eot|svg|ttf|mp4)$") {
			expires 3d;
			access_log off;
			add_header Cache-Control "public";
		}
	}

	location /static {
		alias /code/static; # your Django project's static files - amend as required
		if ($request_uri ~* "\.(css|js)$") {
			expires 1d;
			access_log off;
			add_header Cache-Control "public";
	    }

	}


	location / {

		add_header     X-uWSGI-Cache $upstream_cache_status;

        # server cache  静态文件不能加缓存
        uwsgi_cache  mycache;
        uwsgi_cache_valid  200 301 15m;
        slice 1m;
	    proxy_set_header Range $slice_range;
	    proxy_set_header Range $http_range;
    	# proxy_cache_valid 200 301 304 30m;
        uwsgi_cache_key  $request_uri;

        # client cache
        expires 3d;

        uwsgi_pass  uwsgi;    # socket服务
		# proxy_pass    http://uwsgi;  # TCP服务的负载均衡
		include     /etc/nginx/uwsgi_params; # the uwsgi_params file you installed
	}
    # return 301 https://www.femn.com$request_uri; # 不使用docker nginx的话,使用这名话,
    # 就可以替代listen 443中的server的 location了
}

server{

	listen  80;
	listen  443;
	server_name  0.0.0.0;

	ssl on;
	ssl_certificate femn.pem;
	ssl_certificate_key femn_private.key;
	ssl_session_timeout 5m;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;

	location /media  {

	    alias /code/media;  # your Django project's media files - amend as required

		if ($request_uri ~* "\.(ico|gif|jpe?g|png|woff|woff2|eot|svg|ttf|mp4)$") {
			expires 3d;
			access_log off;
			add_header Cache-Control "public";
		}
	}

	location /static {
		alias /code/static; # your Django project's static files - amend as required
		if ($request_uri ~* "\.(css|js)$") {
			expires 1d;
			access_log off;
			add_header Cache-Control "public";
	    }
	}

    # location /要放在最后,不能覆盖掉静态location配置
	location / {

		add_header     X-uWSGI-Cache $upstream_cache_status;

        # server cache  静态文件不能加缓存服务器
        uwsgi_cache  mycache;
        uwsgi_cache_valid  200 301 15m;
        slice 1m;
	    proxy_set_header Range $slice_range;
	    proxy_set_header Range $http_range;
    	# proxy_cache_valid 200 301 304 30m;
        uwsgi_cache_key  $request_uri;

        # client cache
        expires 3d;

		uwsgi_pass  uwsgi;
		include     /etc/nginx/uwsgi_params; # the uwsgi_params file you installed
	}
}